<?php namespace Digbang\Doctrine\Commands\Migrations;

use Doctrine\ORM\EntityManagerInterface;
use Illuminate\Contracts\Config\Repository;
use Symfony\Component\Console\Input\InputOption;
use Doctrine\DBAL\Migrations\Configuration\Configuration;

/**
 * Command for generating new blank migration classes
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Jonathan Wage <jonwage@gmail.com>
 */
class GenerateCommand extends AbstractMigrationCommand
{
    private static $_template = '<?php namespace <namespace>;

use Doctrine\DBAL\Migrations\AbstractMigration;
use Doctrine\DBAL\Schema\Schema;

/**
 * Auto-generated Migration: Please modify to your need!
 */
class Version<version> extends AbstractMigration
{
    public function up(Schema $schema)
    {
        // this up() migration is autogenerated, please modify it to your needs
<up>
    }

    public function down(Schema $schema)
    {
        // this down() migration is autogenerated, please modify it to your needs
<down>
    }
}
';
    protected $name = 'doctrine:migrations:generate';

    protected $description = 'Generate a blank migration class.';

    protected function configure()
    {
        $this->setHelp(<<<EOT
The <info>%command.name%</info> command generates a blank migration class:

    <info>%command.full_name%</info>

You can optionally specify a <comment>--editor-cmd</comment> option to open the generated file in your favorite editor:

    <info>%command.full_name% --editor-cmd=mate</info>
EOT
        );
    }

    public function handle(EntityManagerInterface $em, Repository $config)
    {
        $configuration = $this->getMigrationConfiguration($em, $config);

        $version = date('YmdHis');
        $path = $this->generateMigration($configuration, $version);

        $this->line(sprintf('Generated new migration class to "<info>%s</info>"', $path));
    }

    protected function generateMigration(Configuration $configuration, $version, $up = null, $down = null)
    {
        $placeHolders = [
            '<namespace>',
            '<version>',
            '<up>',
            '<down>'
        ];
        $replacements = [
            $configuration->getMigrationsNamespace(),
            $version,
            $up ? "        " . implode("\n        ", explode("\n", $up)) : null,
            $down ? "        " . implode("\n        ", explode("\n", $down)) : null
        ];
        $code = str_replace($placeHolders, $replacements, self::$_template);
        $dir = $configuration->getMigrationsDirectory();
        $dir = $dir ? $dir : getcwd();
        $dir = rtrim($dir, '/');
        $path = $dir . '/Version' . $version . '.php';

        if (!file_exists($dir)) {
            throw new \InvalidArgumentException(sprintf('Migrations directory "%s" does not exist.', $dir));
        }

        file_put_contents($path, $code);

        if ($editorCmd = $this->option('editor-cmd')) {
            shell_exec($editorCmd . ' ' . escapeshellarg($path));
        }

        return $path;
    }

    protected function getOptions()
    {
        return array_merge(parent::getOptions(), [
            ['editor-cmd', null, InputOption::VALUE_OPTIONAL, 'Open file with this command upon creation.']
        ]);
    }
}