<?php namespace Digbang\Doctrine\Tools;

class EntityRepositoryGenerator
{
    protected static $_template = '<?php <namespace>

use <entityFullName>;
use <repositoryFullName>;
use Doctrine\ORM\EntityManagerInterface;

/**
 * <className>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class <className> extends <repositoryName>
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, $em->getClassMetadata(<entityName>::class));
    }
}
';
    protected $repositoryName;

    /**
     * @param string $fullRepoName
     *
     * @return string
     */
    public function generateEntityRepositoryClass($fullClassName, $fullRepoName)
    {
        $variables = [
            '<namespace>'          => $this->generateEntityRepositoryNamespace($fullRepoName),
            '<repositoryName>'     => class_basename($this->generateEntityRepositoryName($fullRepoName)),
            '<repositoryFullName>' => ltrim($this->generateEntityRepositoryName($fullRepoName), '\\'),
            '<className>'          => $this->generateClassName($fullRepoName),
            '<entityName>'         => class_basename($fullClassName),
            '<entityFullName>'     => $fullClassName
        ];

        return str_replace(array_keys($variables), array_values($variables), self::$_template);
    }

    /**
     * Generates the namespace, if class do not have namespace, return empty string instead.
     *
     * @param string $fullClassName
     *
     * @return string $namespace
     */
    private function getClassNamespace($fullClassName)
    {
        $namespace = substr($fullClassName, 0, strrpos($fullClassName, '\\'));

        return $namespace;
    }

    /**
     * Generates the class name
     *
     * @param string $fullClassName
     *
     * @return string
     */
    private function generateClassName($fullClassName)
    {
        $namespace = $this->getClassNamespace($fullClassName);

        $className = $fullClassName;

        if ($namespace) {
            $className = substr($fullClassName, strrpos($fullClassName, '\\') + 1, strlen($fullClassName));
        }

        return $className;
    }

    /**
     * Generates the namespace statement, if class do not have namespace, return empty string instead.
     *
     * @param string $fullClassName The full repository class name.
     *
     * @return string $namespace
     */
    private function generateEntityRepositoryNamespace($fullClassName)
    {
        $namespace = $this->getClassNamespace($fullClassName);

        return $namespace ? 'namespace ' . $namespace . ';' : '';
    }

    /**
     * @param string $fullClassName
     *
     * @return string $repositoryName
     */
    private function generateEntityRepositoryName($fullClassName)
    {
        $namespace = $this->getClassNamespace($fullClassName);

        $repositoryName = $this->repositoryName ?: 'Doctrine\ORM\EntityRepository';

        if ($namespace && $repositoryName[0] !== '\\') {
            $repositoryName = '\\' . $repositoryName;
        }

        return $repositoryName;
    }

    /**
     * @param string $fullClassName
     * @param string $outputDirectory
     *
     * @return void
     */
    public function writeEntityRepositoryClass($fullClassName, $fullRepoName, $outputDirectory)
    {
        $code = $this->generateEntityRepositoryClass($fullClassName, $fullRepoName);

        $path = $outputDirectory . DIRECTORY_SEPARATOR . class_basename($fullRepoName) . '.php';

        $dir = dirname($path);

        if ( ! is_dir($dir)) {
            mkdir($dir, 0777, true);
        }

        if ( ! file_exists($path)) {
            file_put_contents($path, $code);
        }
    }

    /**
     * @param string $repositoryName
     *
     * @return \Doctrine\ORM\Tools\EntityRepositoryGenerator
     */
    public function setDefaultRepositoryName($repositoryName)
    {
        $this->repositoryName = $repositoryName;

        return $this;
    }
}
